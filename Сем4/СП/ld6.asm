.model small
.stack 100h

.data
    msg1 DB ' ?? + ', 0
    msg2 DB ' ??', 0Dh, 0Ah, '$'
    param1 DB 3 DUP(0)         
    num DB 0
    dozens DB 0
    remainder DB 0

.code
main PROC
    mov ax, @data
    mov ds, ax
    
    call read_param
    
    call calculate_dozens
    
    call print_result
    
    mov ax, 4C00h
    int 21h
main ENDP

read_param PROC
    push si
    push di

    mov si, 81h  ; ????????? ???? ???????? ? 81h ? PSP
    lea di, param1  ; ??????? ?? ???? ??? ??

    ; ???? ??????
skip_spaces:
    mov al, [si]  ; ???? ???? ?? DS:[SI]
    cmp al, ' '
    jne read_digit
    inc si
    jmp skip_spaces
read_digit:
    mov al, [si]  ; ???? ???? ?? DS:[SI]
    mov [di], al  ; ????? ???? ? ????
    inc si
    inc di

    mov al, [si]  ; ???? ???? ?? DS:[SI]
    mov [di], al  ; ????? ???? ? ????
    inc si
    inc di

    mov al, [si]  ; ???? ???? ?? DS:[SI]
    mov [di], al  ; ????? ???? ? ????
    inc si
    inc di

    mov byte ptr [di], 0  ; ??????? ???? ???? ????
    pop di
    pop si
    ret
read_param ENDP

calculate_dozens PROC
    ; ?????????? ASCII ? ??? ??
    mov si, offset param1
    xor cx, cx  ; CX ??? ????? ?????? ??

convert_loop:
    mov al, [si]  ; ???? ???? ?? ????
    cmp al, 0
    je done_converting
    sub al, '0'  ; ????? ASCII-???? ? ??
    mov ax, cx
    mov bl, 10
    mul bl       ; ???????? CX ?? 10
    add cx, ax   ; ??????? ????? ????
    inc si
    jmp convert_loop

done_converting:
    ; ??????? ??? ? ????
    mov ax, cx
    mov bl, 12
    xor dx, dx   ; ???? DX ??? ???????
    div bl       ; AX = CX / 12, DX = CX % 12
    mov dozens, al
    mov remainder, dl
    ret
calculate_dozens ENDP

print_result PROC
    ; ??? ????? ? ??? "X ?? + Y ??"
    mov al, dozens
    call print_number
    lea dx, msg1
    call print_string
    mov al, remainder
    call print_number
    lea dx, msg2
    call print_string
    ret
print_result ENDP

print_number PROC
    ; ?????????? ?? ? AL ? ???? ? ???
    push ax
    push bx
    push cx
    push dx
    
    xor cx, cx  ; CX ??? ????? ??????? ???
    mov bx, 10  ; ?????? ??? ??????? ????
    
convert_to_string:
    xor dx, dx
    div bx       ; ????? AX ?? 10
    push dx      ; ???? (???)
    inc cx       ; ????????? ????? ???
    test ax, ax
    jnz convert_to_string
    
print_digits:
    pop dx       ; ?????? ????
    add dl, '0'  ; ????? ? ASCII
    mov ah, 02h  ; DOS-???? ??? ???? ?????
    int 21h
    loop print_digits
    
    pop dx
    pop cx
    pop bx
    pop ax
    ret
print_number ENDP

print_string PROC
    push ax
    
    mov ah, 09h
    int 21h
    
    pop ax
    ret
print_string ENDP

END main